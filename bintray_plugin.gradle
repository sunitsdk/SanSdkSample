allprojects {
    repositories {
        jcenter()

        maven {
            name "SUnit's maven repo"
            url "https://dl.bintray.com/sunitsdk/SUnit"
        }

        maven {
            url "https://dl.bintray.com/shareit-pay/PaySDK"
        }

    }
}

apply plugin: 'com.github.panpf.bintray-publish'

ext {
    ARTIFACT_ID = properties.ARTIFACT_ID
    REPO_DESC = properties.REPO_DESC
    SDK_VERSION_NAME = loadVersionNameByProperties(0, "gradle.properties")
    SDK_VERSION_CODE = loadVersionCodeByProperties(0, "gradle.properties")
    SDK_NAME = ARTIFACT_ID

    mavenDependencies = [
       "lotus": "com.lotus:kv:1.0.4"
    ]
}

android {
    lintOptions {
        abortOnError false
    }

}

publish {
    artifactId = ARTIFACT_ID
    publishVersion = SDK_VERSION_NAME
    desc = REPO_DESC

    groupId = 'com.sunit'

    repoName = 'SUnit'
    userOrg = 'sunitsdk'
    bintrayUser = "sunitsdk"
    bintrayKey = "af9c3a30ea8a3d1d46c3976a7f3dc833f0f494b4"
    website = 'https://github.com/sunitsdk/SUnitDemo.git'
}
android {
    lintOptions {
        abortOnError false
    }
}

//读取属性信息
String loadVersionNameByProperties(int findCount, String filePath) {
    println("loadVersionNameByProperties findCount = $findCount filePath = $filePath")
    if (findCount >= 5) {
        return "0"
    }
    Properties pro = new Properties()
    def parentPathSeparator = "../"

    file(filePath).withInputStream { stream ->
        pro.load(stream)
    }
    def curVersionName = pro.getProperty("SDK_VERSION_NAME")
    println("curVersionName = $curVersionName")
    if (curVersionName == null) {
        loadVersionNameByProperties(++findCount, parentPathSeparator + filePath)
    } else {
        println("return curVersionName = $curVersionName")
        return curVersionName
    }
}

//读取属性信息
int loadVersionCodeByProperties(int findCount, String filePath) {
    println("loadVersionCodeByProperties findCount = $findCount filePath = $filePath")
    if (findCount >= 5) {
        return 1
    }
    Properties pro = new Properties()
    def parentPathSeparator = "../"

    file(filePath).withInputStream { stream ->
        pro.load(stream)
    }
    def versionCode = pro.getProperty("SDK_VERSION_CODE")
    println("versionCode = $versionCode")
    if (versionCode == null) {
        loadVersionCodeByProperties(++findCount, parentPathSeparator + filePath)
    } else {
        println("return versionCode = $versionCode")
        return Integer.valueOf(versionCode)
    }
}

tasks.withType(Javadoc).all { enabled = false } // non ascii characters make it crash
